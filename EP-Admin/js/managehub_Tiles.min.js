/* SPJS tiles for SharePoint 2010 and 2013 v1.2.5
 * ---------------------------------------------
 * Created by Alexander Bautz
 * alexander.bautz@gmail.com
 * http://spjsblog.com
 * Copyright (c) 2012-2016 Alexander Bautz (Licensed under the MIT X11 License)
 * ---------------------------------------------
 */
var spjs = spjs || {};
spjs.tiles = {
    "data": {
        "version": "1.2.5",
        "versionDate": "September 29. 2016",
        "setupListName": "EPTile",
		"setupListBaseUrl": "https://infornt.sharepoint.com/sites/RNTENG/",
        "setupListDescr": "SPJS Tiles for SP 2010 and 2013",
        "updatedFields": []
    },
    "init": function(a, b) {
        if(typeof spjs_tiles_listBaseurl !== "undefined"){
            spjs.tiles.data.setupListBaseUrl = spjs_tiles_listBaseurl;
        }
        if ($("#" + a).length === 0) {
            alert("[SPJS Tiles]\n\nThe container \"" + a + "\", specified in the call to \"spjs.tiles.init\" does not exist. Please verify that you have a container with this ID in the page.");
            return;
        }
        if (b === undefined) {
            b = "";
        }
        SP.SOD.executeFunc("sp.js");
        ExecuteOrDelayUntilScriptLoaded(function() {
            spjs.tiles.build(a, b);
        }, "sp.js");
    },
    "updateListName": function() {
        var e, site, configList;
        e = SP.ClientContext(spjs.tiles.data.setupListBaseUrl);
        site = e.get_web();
        configList = site.get_lists().getByTitle("EPTile");
        e.load(configList);
        e.executeQueryAsync(function(c, d) {
            configList.set_title(spjs.tiles.data.setupListName);
            configList.update();
            e.executeQueryAsync(function(a, b) {
                location.href = location.href;
            }, function(a, b) {
                alert("Error updating the list title: " + b.get_message());
            });
        }, function(a, b) {
            alert("No previous version of the SPJS Tiles Solution was found in this site.\n\nAre you sure the error message states that the list does not exist, and are you in fact upgrading from a previous version?");
        });
    },
    "updateField": function(f) {
        var g, site, configList, configListFields, ufArr, msg;
        g = SP.ClientContext(spjs.tiles.data.setupListBaseUrl);
        site = g.get_web();
        configList = site.get_lists().getByTitle(spjs.tiles.data.setupListName);
        configListFields = configList.get_fields();
        ufArr = [];
        g.load(configList);
        g.load(configListFields);
        g.executeQueryAsync(function(c, d) {
            var e, cField, upd = false;
            $.each(f, function(a, o) {
                e = configListFields.getEnumerator();
                while (e.moveNext()) {
                    cField = e.get_current();
                    if (a === cField.get_title()) {
                        o.exist = true;
                        if (cField.get_description() !== f[a].description) {
                            cField.set_description(f[a].description);
                            cField.update();
                            spjs.tiles.data.updatedFields.push(a);
                            upd = true;
                            break;
                        }
                        return;
                    }
                }
                if (upd) {
                    return false;
                }
            });
            if (upd) {
                g.executeQueryAsync(function(a, b) {
                    spjs.tiles.updateField(f);
                }, function(a, b) {
                    alert("Error updating the description:\n" + b.get_message());
                });
            } else {
                $.each(f, function(a, o) {
                    if (!o.exist) {
                        ufArr.push(a);
                        g.load(configListFields.addFieldAsXml(o.xml.replace("{0}", o.description), true, SP.AddFieldOptions.defaultValue));
                    }
                });
                msg = "";
                if (spjs.tiles.data.updatedFields.length > 0) {
                    msg = "Updated fields:\n" + spjs.tiles.data.updatedFields.join(", ");
                } else {
                    msg = "No fields updated.";
                }
                if (ufArr.length > 0) {
                    configList.update();
                    g.executeQueryAsync(function(a, b) {
                        msg += "\n\nAdded the following fields:\n" + ufArr.join(", ");
                        alert(msg);
                        location.href = location.pathname;
                    }, function(a, b) {
                        alert("Error updating the list: " + b.get_message());
                    });
                } else {
                    msg += "\n\nNo fields added.";
                    alert(msg);
                    location.href = location.pathname;
                }
            }
        }, function(a, b) {
            if (confirm("The list does not exist, create it?")) {
                spjs.tiles.addOrUpdateList(false);
            }
        });
    },
    "addOrUpdateList": function(a) {
        var c, cc, site, listCreationInfo, configList;
        c = {
            "Title": {
                "exist": true,
                "update": true,
                "xml": null,
                "description": "The tile collection identifier. This value must be the same for all tiles in a collection. This is the key used in the call to the function from the CEWP code."
            },
            "Module": {
                "exist": false,
                "update": true,
                "xml": "<Field DisplayName='Module' Type='Note' RichText='FALSE' Description='{0}' />",
                "description": "The visible text on the tile. Use plain text, or JSON format like this to support MUI: {\"1033\":\"English value\",\"default\":\"default value\"}. To use this as a hading for a row, use ColumnIndex 00 in the Index field."
            },
            "Description": {
                "exist": false,
                "update": true,
                "xml": "<Field DisplayName='Description' Type='Note' RichText='FALSE' Description='{0}' />",
                "description": "The description text on the tile. Use plain text, or JSON format like this to support MUI: {\"1033\":\"English value\",\"default\":\"default value\"}"
            },
            "Target": {
                "exist": false,
                "update": true,
                "xml": "<Field DisplayName='Target' Type='Choice' Description='{0}' Format='Dropdown' FillInChoice='FALSE'><Default>Dialog</Default><CHOICES><CHOICE>Current window</CHOICE><CHOICE>New window</CHOICE><CHOICE>Dialog</CHOICE></CHOICES></Field>",
                "description": "How should the link open?"
            },
            "ImageURL": {
                "exist": false,
                "update": true,
                "xml": "<Field DisplayName='ImageURL' Type='Note' RichText='FALSE' Description='{0}' />",
                "description": "The URL to the background image on the tile. If you configure a Font Awesome Icon below, this will override this configuration. Use plain text, or JSON format like this to support MUI: {\"1033\":\"English value\",\"default\":\"default value\"}"
            },
            "FontAwesomeIcon": {
                "exist": false,
                "update": true,
                "xml": "<Field DisplayName='FontAwesomeIcon' Type='Note' RichText='FALSE' Description='{0}' />",
                "description": "Use Font Awesome Scalable vector icons as background image on the tile (overrides Image). You find the icons and the setup instructions here: http://fontawesome.io. Plese note that you must refer the Font Awesome CSS file in the CEWP. Refer the Get Started tab in the Font Awesome site. Use plain text, or JSON format like this to support MUI: {\"1033\":\"English value\",\"default\":\"default value\"}"
            },
            "FontAwesomeStyle": {
                "exist": false,
                "update": true,
                "xml": "<Field DisplayName='FontAwesomeStyle' Type='Note' RichText='FALSE' Description='{0}' />",
                "description": "The style to apply to the Font Awesome icon. Example:\ncolor:#ffffff;font-size:30px\n\nUse plain text, or JSON format like this to support MUI: {\"1033\":\"English value\",\"default\":\"default value\"}"
            },
            "BgColor": {
                "exist": false,
                "update": true,
                "xml": "<Field DisplayName='BgColor' Type='Text' Description='{0}' />",
                "description": "The background color on the tile. Use color name or Hex value."
            },
            "TileSize": {
                "exist": false,
                "update": true,
                "xml": "<Field DisplayName='TileSize' Type='Choice' Description='{0}' Format='Dropdown' FillInChoice='TRUE'><Default>150</Default><CHOICES><CHOICE>150</CHOICE><CHOICE>100</CHOICE><CHOICE>75</CHOICE></CHOICES></Field>",
                "description": "Tile size in pixels. Select one of the predefined values, or supply a comma separated list of 5 numbers like this:\nTileWidth,TileHeight,OverlayPositionFromTop,TextHeight,DescriptionPaddingTop\n\nFor reference, here is the values for the 150px tile: 150,150,100,36,15"
            },
            "TargetURL": {
                "exist": false,
                "update": true,
                "xml": "<Field DisplayName='TargetURL' Type='Note' RichText='FALSE' Description='{0}' />",
                "description": "The target URL for the tile. Use plain text, or JSON format like this to support MUI: {\"1033\":\"English value\",\"default\":\"default value\"}"
            },
            "RefreshParent": {
                "exist": false,
                "update": true,
                "xml": "<Field DisplayName='RefreshParent' Type='Boolean' Description='{0}' />",
                "description": "Refresh parent page when the dialog closes."
            },
            "Index": {
                "exist": false,
                "update": true,
                "xml": "<Field DisplayName='Index' Type='Text' Description='{0}' />",
                "description": "Use this format: RowIndex-ColumnIndex. Use 01, 02 etc. for numbers below 10. Use ColumnIndex 00 to create a heading for the row."
            }
        };
        cc = SP.ClientContext(spjs.tiles.data.setupListBaseUrl);
        site = cc.get_web();
        if (a) {
            spjs.tiles.updateField(c);
        } else {
            listCreationInfo = new SP.ListCreationInformation();
            listCreationInfo.set_templateType(SP.ListTemplateType.genericList);
            listCreationInfo.set_title(spjs.tiles.data.setupListName);
            listCreationInfo.set_description(spjs.tiles.data.setupListDescr);
            listCreationInfo.set_quickLaunchOption(SP.QuickLaunchOptions.off);
            configList = site.get_lists().add(listCreationInfo);
            $.each(c, function(a, o) {
                if (!o.exist) {
                    cc.load(configList.get_fields().addFieldAsXml(o.xml.replace("{0}", o.description), true, SP.AddFieldOptions.defaultValue));
                }
            });
            configList.set_hidden(false);
            configList.update();
            cc.executeQueryAsync(function(a, b) {
                alert("List \"" + spjs.tiles.data.setupListName + "\" created successfully");
                location.href = location.protocol + "//" + location.host + _spPageContextInfo.webServerRelativeUrl + "/Lists/" + spjs.tiles.data.setupListName.replace("-", "");
            }, function(a, b) {
                alert(b.get_message());
            });
        }
    },
    "build": function(d, e) {
        var f, list, qb, camlQuery, allItems, listEnumerator;
        f = new SP.ClientContext(spjs.tiles.data.setupListBaseUrl);
        list = f.get_web().get_lists().getByTitle(spjs.tiles.data.setupListName);
        qb = [];
        qb.push("<View><Query>");
        qb.push("<Where>");
        if (e !== "") {
            qb.push("<Eq><FieldRef Name='Title' /><Value Type='Text'>" + e + "</Value></Eq>>");
        } else {
            qb.push("<IsNotNull><FieldRef Name='ID' /></IsNotNull>");
        }
        qb.push("</Where>");
        qb.push("<OrderBy><FieldRef Name='Index' /></OrderBy>");
        qb.push("</Query>");
        qb.push("<RowLimit>1000</RowLimit>");
        qb.push("</View>");
        camlQuery = new SP.CamlQuery();
        camlQuery.set_viewXml(qb.join(''));
        allItems = list.getItems(camlQuery);
        f.load(allItems, "Include(ID,Title,Index,ImageURL,BgColor,Module,Description,TargetURL,RefreshParent,TileSize,Target,FontAwesomeIcon,FontAwesomeStyle)");
        f.executeQueryAsync(function() {
            var a, currentItem, link, tileSize, target, indexRaw, rIndex, cIndex, bgImg, foIcon, lFoIcon, foIconStyle, lFoIconStyle, bgColor, image, lImage, title, lTitle, descr, ldescr, b, refresh, lLink, z, c;
            a = allItems.get_count();
            if (a === 0) {
                $("#" + d).html("<div style='padding:6px;font-size:12px;background-color:#FFCE36;border:1px gray solid;float:left;clear:both;'><div style='font-size:18px;'>SPJS Tiles</div><div style='margin-top:10px;text-align:center;'>There are no tiles configured for \"" + e + "\". Go to the list <a href='/Lists/" + spjs.tiles.data.setupListName.replace("-", "") + "'>" + spjs.tiles.data.setupListName + "</a> to add items.</div></div>");
            }
            listEnumerator = allItems.getEnumerator();
            while (listEnumerator.moveNext()) {
                currentItem = listEnumerator.get_current();
                link = currentItem.get_item('TargetURL') !== null ? currentItem.get_item('TargetURL') : "";
                bgColor = currentItem.get_item('BgColor');
                refresh = currentItem.get_item('RefreshParent') === true;
                tileSize = currentItem.get_item('TileSize') !== null ? currentItem.get_item('TileSize') : "150";
                if (link.charAt(0) === "{") {
                    try {
                        lLink = $.parseJSON(link);
                        link = lLink[_spPageContextInfo.currentLanguage] !== undefined ? lLink[_spPageContextInfo.currentLanguage] : lLink["default"];
                    } catch (err) {}
                }
                target = currentItem.get_item('Target');
                indexRaw = currentItem.get_item('Index') !== null ? currentItem.get_item('Index') : "00-01";
                if (indexRaw.split("-").length > 1) {
                    rIndex = indexRaw.split('-')[0];
                    cIndex = indexRaw.split('-')[1];
                } else {
                    rIndex = 1;
                    cIndex = indexRaw;
                }
                if ($("#" + d + "_" + rIndex + "_spjs_tile_wrap").length === 0) {
                    $("#" + d).append("<div id='" + d + "_" + rIndex + "_spjs_tile_wrap" + "' class='spjs-tile-row-wrap'></div>");
                }
                title = currentItem.get_item("Module") !== null ? currentItem.get_item("Module") : "";
                if (title.charAt(0) === "{") {
                    try {
                        lTitle = $.parseJSON(title);
                        title = lTitle[_spPageContextInfo.currentLanguage] !== undefined ? lTitle[_spPageContextInfo.currentLanguage] : lTitle["default"];
                    } catch (err) {}
                }
                image = currentItem.get_item('ImageURL') !== null ? currentItem.get_item('ImageURL') : "/_layouts/images/blank.gif";
                if (image.charAt(0) === "{") {
                    try {
                        lImage = $.parseJSON(image);
                        image = lImage[_spPageContextInfo.currentLanguage] !== undefined ? lImage[_spPageContextInfo.currentLanguage] : lImage["default"];
                    } catch (err) {}
                }
                bgImg = "<img style='left: 0px; top: 0px; position: absolute;' onerror='spjs.tiles.imgError(this);' alt='" + title + "' src='" + image + "'>";
                if (currentItem.get_item('FontAwesomeIcon') !== null) {
                    foIcon = currentItem.get_item('FontAwesomeIcon') !== null ? currentItem.get_item('FontAwesomeIcon') : "No Font Awesome Icon configured";
                    foIconStyle = currentItem.get_item('FontAwesomeStyle') !== null ? currentItem.get_item('FontAwesomeStyle') : "";
                    if (foIcon.charAt(0) === "{") {
                        try {
                            lFoIcon = $.parseJSON(foIcon);
                            foIcon = lFoIcon[_spPageContextInfo.currentLanguage] !== undefined ? lFoIcon[_spPageContextInfo.currentLanguage] : lFoIcon["default"];
                        } catch (err) {}
                    }
                    if (foIconStyle.charAt(0) === "{") {
                        try {
                            lFoIconStyle = $.parseJSON(foIconStyle);
                            foIconStyle = lFoIconStyle[_spPageContextInfo.currentLanguage] !== undefined ? lFoIconStyle[_spPageContextInfo.currentLanguage] : lFoIconStyle["default"];
                        } catch (err) {}
                    }
                    bgImg = "<i class='fa " + foIcon + "' style='" + foIconStyle + "'></i>";
                }
                descr = currentItem.get_item("Description") !== null ? currentItem.get_item("Description") : "";
                if (descr.charAt(0) === "{") {
                    try {
                        ldescr = $.parseJSON(descr);
                        descr = ldescr[_spPageContextInfo.currentLanguage] !== undefined ? ldescr[_spPageContextInfo.currentLanguage] : ldescr["default"];
                    } catch (err) {}
                }
                b = [];
                if (parseInt(cIndex, 10) === 0) {
                    b.push("<div class='spjs-tile-heading'>" + title + "</div>");
                } else {
                    switch (tileSize) {
                        case "75":
                            z = ["73", "73", "45", "14", "8"];
                            break;
                        case "100":
                            z = ["100", "100", "66", "24", "14"];
                            break;
                        case "150":
                            z = ["150", "150", "100", "36", "15"];
                            break;
                        default:
                            z = tileSize.split(",");
                            if (z.length !== 5) {
                                alert("[SPJS Tiles]\n\nThe specified tile size: [" + tileSize + "] is not valid. You must provide a comma separated list of 5 numbers.");
                                return;
                            }
                    }
                    b.push("<div class='spjs-tile-root' style='width:" + (parseInt(z[0], 10) + 4) + "px;height:" + (parseInt(z[1], 10) + 4) + "px;cursor:pointer;'>");
                    b.push("<div class='spjs-tile-content' style='width:" + z[0] + "px;height:" + z[1] + "px;");
                    if (bgColor !== null) {
                        b.push("background-color:" + bgColor + ";");
                    }
                    b.push("'>");
                    b.push("<div style='height: 100%;'>");
                    b.push("<span style='width:" + z[0] + "px;height:" + z[1] + "px;overflow:hidden;display:inline-block;position:relative;' onmouseover='spjs.tiles.slideUp(this,true)' onmouseout='spjs.tiles.slideDown(this,true,\"" + z[2] + "\")'>");
                    b.push(bgImg);
                    b.push("</span>");
                    b.push("<div class='spjs-tile-detailsbox' id='tile_" + d + "_" + cIndex + "' style='left:0px;top:" + z[2] + "px;width:" + z[0] + "px;height:" + z[1] + "px;' onclick='spjs.tiles.goTo(\"" + link + "\",\"" + target + "\",this," + refresh + ")' onmouseover='spjs.tiles.slideUp(this,false)' onmouseout='spjs.tiles.slideDown(this,false,\"" + z[2] + "\")'>");
                    b.push("<ul class='spjs-tile-ul' style='height:" + z[0] + "px;'>");
                    b.push("<li class='spjs-tile-li' style='height:" + z[3] + "px;'>");
                    b.push("<div class='spjs-tile-li-text' style='max-height:" + z[3] + "px;'>" + title + "</div>");
                    b.push("</li>");
                    b.push("<li class='spjs-tile-li-description' style='padding-top:" + z[4] + "px;'>" + descr + "</li>");
                    b.push("</ul>");
                    b.push("</div>");
                    b.push("</div>");
                    b.push("</div>");
                    b.push("</div>");
                }
                if ($("#" + d + "_" + cIndex + "-" + rIndex).length === 0) {
                    c = [];
                    c.push("<div id='" + d + "_" + cIndex + "-" + rIndex + "'");
                    if (cIndex !== "00") {
                        c.push(" class='spjs-tile-wrap'");
                    }
                    c.push("></div>");
                    $("#" + d + "_" + rIndex + "_spjs_tile_wrap").append(c.join(""));
                }
                $("#" + d + "_" + cIndex + "-" + rIndex).append(b.join(""));
            }
            if (GetUrlKeyValue("SPJSTiles:UpdateList") === "1") {
                if (confirm("Check for updates to the SPJS Tiles configuration list?")) {
                    spjs.tiles.addOrUpdateList(true);
                }
            }
        }, function(a, b) {
            if (b.get_errorCode() === -1 || b.get_errorCode() === -2147024809) {
                $("#" + d).html("<div style='padding:6px;font-size:12px;background-color:#FFCE36;border:1px gray solid;float:left;clear:both;'><div style='font-size:18px;'>SPJS Tiles</div>" + b.get_message() + "<div style='margin-top:10px;text-align:center;'><input type='button' value='Add or update the list' onclick='spjs.tiles.addOrUpdateList(true)' /></div><br>If the above error message states that the list does not exist, and you are updating from a previous version,<br>please hit this button to update the list name:<br><div style='margin-top:10px;text-align:center;'><input type='button' value='Update list name' onclick='spjs.tiles.updateListName()'></div></div>");
            } else {
                alert("[spjs.tiles.build]\n" + b.get_message());
            }
        });
    },
    "imgError": function(a) {
        $(a).replaceWith("<span style='color:#ffffff'>Error: The image specified was not found</span>");
    },
    "slideUp": function(a, b) {
        var e;
        if (b) {
            e = $(a).parent().find("div.spjs-tile-detailsbox");
        } else {
            e = $(a);
        }
        e.stop().animate({
            "top": "0px"
        }, 200);
    },
    "slideDown": function(a, b, n) {
        var e;
        if (b) {
            e = $(a).parent().find("div.spjs-tile-detailsbox");
        } else {
            e = $(a);
        }
        e.stop().animate({
            "top": n + "px"
        }, 100);
    },
    "goTo": function(a, t, b, c) {
        if (a !== "") {
            switch (t.toLowerCase()) {
                case "dialog":
                    spjs.tiles.openInDlg(a, c);
                    break;
                case "new window":
                    window.open(a);
                    break;
                default:
                    location.href = a;
            }
        }
    },
    "openInDlg": function(a, b) {
        var c = {
            "url": a
        };
        if (b) {
            c.dialogReturnValueCallback = spjs.tiles.dlgCallbackWithRefresh;
        } else {
            c.dialogReturnValueCallback = spjs.tiles.dlgCallback;
        }
        SP.UI.ModalDialog.showModalDialog(c);
    },
    "dlgCallback": function() {},
    "dlgCallbackWithRefresh": function() {
        location.href = location.href;
    }
};